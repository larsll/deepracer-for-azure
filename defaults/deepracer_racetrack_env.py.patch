diff --git a/simulation/aws-robomaker-sample-application-deepracer/simulation_ws/src/sagemaker_rl_agent/markov/environments/deepracer_racetrack_env.py b/simulation/aws-robomaker-sample-application-deepracer/simulation_ws/src/sagemaker_rl_agent/markov/environments/deepracer_racetrack_env.py
index 569b33c..9f43d62 100644
--- a/simulation/aws-robomaker-sample-application-deepracer/simulation_ws/src/sagemaker_rl_agent/markov/environments/deepracer_racetrack_env.py
+++ b/simulation/aws-robomaker-sample-application-deepracer/simulation_ws/src/sagemaker_rl_agent/markov/environments/deepracer_racetrack_env.py
@@ -467,7 +467,7 @@ class DeepRacerRacetrackEnv(gym.Env):
         # Update metrics based on job type
         if self.job_type == TRAINING_JOB:
             self.send_reward_to_cloudwatch(self.reward_in_episode)
-            self.update_training_metrics()
+            self.update_training_metrics(progress)
             self.write_metrics_to_s3()
             if self.is_training_done():
                 self.cancel_simulation_job()
@@ -485,13 +485,18 @@ class DeepRacerRacetrackEnv(gym.Env):
         eval_metric['trial'] = int(self.number_of_trials)
         self.metrics.append(eval_metric)
 
-    def update_training_metrics(self):
+    def update_training_metrics(self, progress = 1):
         training_metric = {}
         training_metric['reward_score'] = int(round(self.reward_in_episode))
         training_metric['metric_time'] = int(round(time.time() * 1000))
         training_metric['start_time'] = int(round(self.simulation_start_time * 1000))
         training_metric['elapsed_time_in_milliseconds'] = int(round((time.time() - self.simulation_start_time) * 1000))
         training_metric['episode'] = int(self.episodes)
+        training_metric['completion_percentage'] = int(progress)
+        if int(progress) == 100:
+            training_metric['episode_status'] = "Lap complete"
+        else:
+            training_metric['episode_status'] = "Off track"
         self.metrics.append(training_metric)
 
     def write_metrics_to_s3(self):
